{"id":"../node_modules/@apollo/client/link/http/checkFetcher.js","dependencies":[{"name":"/Users/kiranraju/Documents/Side Projects/Notely/ui/node_modules/@apollo/client/link/http/checkFetcher.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/kiranraju/Documents/Side Projects/Notely/ui/package.json","includedInParent":true,"mtime":1593202705101},{"name":"/Users/kiranraju/Documents/Side Projects/Notely/ui/.babelrc","includedInParent":true,"mtime":1592849635497},{"name":"/Users/kiranraju/Documents/Side Projects/Notely/ui/node_modules/@apollo/client/package.json","includedInParent":true,"mtime":1592848640799},{"name":"ts-invariant","loc":{"line":1,"column":31},"parent":"/Users/kiranraju/Documents/Side Projects/Notely/ui/node_modules/@apollo/client/link/http/checkFetcher.js","resolved":"/Users/kiranraju/Documents/Side Projects/Notely/ui/node_modules/ts-invariant/lib/invariant.esm.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkFetcher = void 0;\n\nvar _tsInvariant = require(\"ts-invariant\");\n\nvar checkFetcher = function (fetcher) {\n  if (!fetcher && typeof fetch === 'undefined') {\n    throw \"development\" === \"production\" ? new _tsInvariant.InvariantError(13) : new _tsInvariant.InvariantError(\"\\n\\\"fetch\\\" has not been found globally and no fetcher has been configured. To fix this, install a fetch package (like https://www.npmjs.com/package/cross-fetch), instantiate the fetcher, and pass it into your HttpLink constructor. For example:\\n\\nimport fetch from 'cross-fetch';\\nimport { ApolloClient, HttpLink } from '@apollo/client';\\nconst client = new ApolloClient({\\n  link: new HttpLink({ uri: '/graphql', fetch })\\n});\\n    \");\n  }\n};\n\nexports.checkFetcher = checkFetcher;"},"sourceMaps":{"js":{"mappings":[{"source":"checkFetcher.js","name":null,"original":{"line":2,"column":10},"generated":{"line":10,"column":0}},{"source":"checkFetcher.js","name":null,"original":{"line":2,"column":11},"generated":{"line":10,"column":4}},{"source":"checkFetcher.js","name":null,"original":{"line":2,"column":23},"generated":{"line":10,"column":16}},{"source":"checkFetcher.js","name":null,"original":{"line":2,"column":26},"generated":{"line":10,"column":19}},{"source":"checkFetcher.js","name":null,"original":{"line":2,"column":36},"generated":{"line":10,"column":29}},{"source":"checkFetcher.js","name":null,"original":{"line":2,"column":26},"generated":{"line":10,"column":36}},{"source":"checkFetcher.js","name":null,"original":{"line":2,"column":45},"generated":{"line":10,"column":38}},{"source":"checkFetcher.js","name":null,"original":{"line":3,"column":4},"generated":{"line":11,"column":0}},{"source":"checkFetcher.js","name":null,"original":{"line":3,"column":8},"generated":{"line":11,"column":6}},{"source":"checkFetcher.js","name":null,"original":{"line":3,"column":9},"generated":{"line":11,"column":7}},{"source":"checkFetcher.js","name":null,"original":{"line":3,"column":8},"generated":{"line":11,"column":14}},{"source":"checkFetcher.js","name":null,"original":{"line":3,"column":20},"generated":{"line":11,"column":18}},{"source":"checkFetcher.js","name":null,"original":{"line":3,"column":27},"generated":{"line":11,"column":25}},{"source":"checkFetcher.js","name":null,"original":{"line":3,"column":20},"generated":{"line":11,"column":30}},{"source":"checkFetcher.js","name":null,"original":{"line":3,"column":37},"generated":{"line":11,"column":35}},{"source":"checkFetcher.js","name":null,"original":{"line":3,"column":4},"generated":{"line":11,"column":46}},{"source":"checkFetcher.js","name":null,"original":{"line":3,"column":50},"generated":{"line":11,"column":48}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":8},"generated":{"line":12,"column":0}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":14},"generated":{"line":12,"column":10}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":39},"generated":{"line":12,"column":28}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":14},"generated":{"line":12,"column":40}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":54},"generated":{"line":12,"column":43}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":58},"generated":{"line":12,"column":47}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":54},"generated":{"line":12,"column":74}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":73},"generated":{"line":12,"column":75}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":54},"generated":{"line":12,"column":77}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":14},"generated":{"line":12,"column":78}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":79},"generated":{"line":12,"column":81}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":83},"generated":{"line":12,"column":85}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":79},"generated":{"line":12,"column":112}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":98},"generated":{"line":12,"column":113}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":79},"generated":{"line":12,"column":549}},{"source":"checkFetcher.js","name":null,"original":{"line":4,"column":8},"generated":{"line":12,"column":550}},{"source":"checkFetcher.js","name":null,"original":{"line":5,"column":5},"generated":{"line":13,"column":0}},{"source":"checkFetcher.js","name":null,"original":{"line":6,"column":0},"generated":{"line":14,"column":0}},{"source":"checkFetcher.js","name":null,"original":{"line":2,"column":10},"generated":{"line":14,"column":1}}],"sources":{"checkFetcher.js":"import { InvariantError } from 'ts-invariant';\nexport var checkFetcher = function (fetcher) {\n    if (!fetcher && typeof fetch === 'undefined') {\n        throw new InvariantError(\"\\n\\\"fetch\\\" has not been found globally and no fetcher has been configured. To fix this, install a fetch package (like https://www.npmjs.com/package/cross-fetch), instantiate the fetcher, and pass it into your HttpLink constructor. For example:\\n\\nimport fetch from 'cross-fetch';\\nimport { ApolloClient, HttpLink } from '@apollo/client';\\nconst client = new ApolloClient({\\n  link: new HttpLink({ uri: '/graphql', fetch })\\n});\\n    \");\n    }\n};\n//# sourceMappingURL=checkFetcher.js.map"},"lineCount":null}},"error":null,"hash":"bed0c94583f86d3e59aef4dd93f7c4dc","cacheData":{"env":{"NODE_ENV":"development"}}}