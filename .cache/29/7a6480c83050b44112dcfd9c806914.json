{"id":"../node_modules/unist-util-is/convert.js","dependencies":[{"name":"/Users/kiranraju/Documents/Side Projects/Notely/ui/package.json","includedInParent":true,"mtime":1593202705101},{"name":"/Users/kiranraju/Documents/Side Projects/Notely/ui/.babelrc","includedInParent":true,"mtime":1592849635497},{"name":"/Users/kiranraju/Documents/Side Projects/Notely/ui/node_modules/unist-util-is/package.json","includedInParent":true,"mtime":1592848491319}],"generated":{"js":"'use strict'\n\nmodule.exports = convert\n\nfunction convert(test) {\n  if (typeof test === 'string') {\n    return typeFactory(test)\n  }\n\n  if (test === null || test === undefined) {\n    return ok\n  }\n\n  if (typeof test === 'object') {\n    return ('length' in test ? anyFactory : matchesFactory)(test)\n  }\n\n  if (typeof test === 'function') {\n    return test\n  }\n\n  throw new Error('Expected function, string, or object as test')\n}\n\nfunction convertAll(tests) {\n  var results = []\n  var length = tests.length\n  var index = -1\n\n  while (++index < length) {\n    results[index] = convert(tests[index])\n  }\n\n  return results\n}\n\n// Utility assert each property in `test` is represented in `node`, and each\n// values are strictly equal.\nfunction matchesFactory(test) {\n  return matches\n\n  function matches(node) {\n    var key\n\n    for (key in test) {\n      if (node[key] !== test[key]) {\n        return false\n      }\n    }\n\n    return true\n  }\n}\n\nfunction anyFactory(tests) {\n  var checks = convertAll(tests)\n  var length = checks.length\n\n  return matches\n\n  function matches() {\n    var index = -1\n\n    while (++index < length) {\n      if (checks[index].apply(this, arguments)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n// Utility to convert a string into a function which checks a given nodeâ€™s type\n// for said string.\nfunction typeFactory(test) {\n  return type\n\n  function type(node) {\n    return Boolean(node && node.type === test)\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/unist-util-is/convert.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/unist-util-is/convert.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}}],"sources":{"../node_modules/unist-util-is/convert.js":"'use strict'\n\nmodule.exports = convert\n\nfunction convert(test) {\n  if (typeof test === 'string') {\n    return typeFactory(test)\n  }\n\n  if (test === null || test === undefined) {\n    return ok\n  }\n\n  if (typeof test === 'object') {\n    return ('length' in test ? anyFactory : matchesFactory)(test)\n  }\n\n  if (typeof test === 'function') {\n    return test\n  }\n\n  throw new Error('Expected function, string, or object as test')\n}\n\nfunction convertAll(tests) {\n  var results = []\n  var length = tests.length\n  var index = -1\n\n  while (++index < length) {\n    results[index] = convert(tests[index])\n  }\n\n  return results\n}\n\n// Utility assert each property in `test` is represented in `node`, and each\n// values are strictly equal.\nfunction matchesFactory(test) {\n  return matches\n\n  function matches(node) {\n    var key\n\n    for (key in test) {\n      if (node[key] !== test[key]) {\n        return false\n      }\n    }\n\n    return true\n  }\n}\n\nfunction anyFactory(tests) {\n  var checks = convertAll(tests)\n  var length = checks.length\n\n  return matches\n\n  function matches() {\n    var index = -1\n\n    while (++index < length) {\n      if (checks[index].apply(this, arguments)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n// Utility to convert a string into a function which checks a given nodeâ€™s type\n// for said string.\nfunction typeFactory(test) {\n  return type\n\n  function type(node) {\n    return Boolean(node && node.type === test)\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n"},"lineCount":88}},"error":null,"hash":"4c7f3f1fd17dcb353bd28c4991795bca","cacheData":{"env":{}}}